// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  password         String?   // For credentials authentication
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  // SKTCH specific fields
  isPro            Boolean   @default(false) @map("is_pro")
  usageMinutes     Int       @default(0) @map("usage_minutes")
  stripeCustomerId String?   @unique @map("stripe_customer_id")
  subscriptionId   String?   @unique @map("subscription_id")
  planType         String    @default("free") @map("plan_type") // free, pro, team
  trialEndsAt      DateTime? @map("trial_ends_at")
  lastActiveAt     DateTime? @map("last_active_at")
  
  accounts Account[]
  sessions Session[]
  usageLogs UsageLog[]
  subscriptions Subscription[]
  downloads Download[]

  @@map("users")
}

model UsageLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  minutes     Int
  website     String?
  mode        String?  // note, prompt, tasks
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  stripeSubscriptionId String @unique @map("stripe_subscription_id")
  stripePriceId     String   @map("stripe_price_id")
  status            String   // active, canceled, past_due, etc.
  planType          String   @map("plan_type") // pro, team
  billingCycle      String   @map("billing_cycle") // monthly, yearly
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd   DateTime @map("current_period_end")
  cancelAtPeriodEnd Boolean  @default(false) @map("cancel_at_period_end")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Download {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  extensionVersion String @map("extension_version")
  platform    String   // chrome, firefox, etc.
  downloadUrl String   @map("download_url")
  licenseKey  String?  @map("license_key")
  isActive    Boolean  @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at")
  downloadedAt DateTime @default(now()) @map("downloaded_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("downloads")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}